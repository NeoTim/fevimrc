if has("gui_running")
  if has("gui_mac") || has("gui_macvim")
    "set guifont=Menlo:h14
    set guifont=Monaco:h14
    set transparency=6
  endif
endif

autocmd BufWritePost *.js,*.html,*.css,*.scss :%s/\s\+$//e

"=====================================================
" 快捷键
"=====================================================
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" tab navigation"
map tt :tabnew<cr>
map tn :tabnext<cr>
map tp :tabprevious<cr>

map t1 :tabfirst<CR>
map t2 :tabm 1<CR>
map t3 :tabm 2<CR>
map t4 :tabm 3<CR>
map t5 :tabm 4<CR>
map t6 :tabm 1<CR>
map t7 :tabm 1<CR>
map t8 :tabm 2<CR>
map t9 :tabm 3<CR>
map t0 :tablast<CR>

map te :tabedit
map tc :tabclose<cr>

" 分割窗口
map ws :split<cr>
map wv :vsplit<cr>

" 关闭窗口
map wc :close<cr>

" 切换分割窗口
map wn <C-w>w

" Wrapped lines goes down/up to next row, rather than next line in file.
noremap j gj
noremap k gk

" 将所选中内容复制到系统
" 
map cy "+y
noremap P P<CR>

" 模仿MS Windows中的快捷键
vmap <C-c> "+y
vmap <C-x> "yd
nmap <C-v> "+p
vmap <C-v> "+p
nmap <C-a> ggvG$

" 模仿MS Windows中的保存命令: Ctrl+S

imap <C-s> <Esc>:wa<cr>i<Right>
nmap <C-s> :wa<cr>

" Easier horizontal scrolling
map zl zL
map zh zH


" replace(替换)
nnoremap <Leader>f :%s//g<left><left>
vnoremap <Leader>f :s//g<left><left>


nnoremap <Leader>t :retab<cr>
vnoremap <Leader>t :retab<cr>

" 格式化代码
nmap <Leader>g gg=G
vmap <Leader>g gg=G
imap <Leader>g gg=G


" Quit window on <leader>q
nnoremap <leader>q :q!<CR>

"快速打开.vimrc、html.snippets、css.snippets、scss.snippets、javascript.snippets、markdown.snippets、、
map <silent><leader>1 :e ~/.vimrc.local<cr>
map <silent><leader>2 :e ~/.vimrc.local.bundles<cr>


" keyboard shortcuts
imap <Leader>e <ESC>
nmap <Leader>e <ESC>
vmap <Leader>e <ESC>
cmap <Leader>e <ESC>


nnoremap <Leader>` :cd ~/vhost/<right>
vnoremap <Leader>` :cd ~/vhost/<right>


"=====================================================
" 插件设置
"=====================================================

"--------------ctrlp.vim--------------
let g:ctrlp_map = '<c-p>'
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'

"-----------emmet-------------

let g:user_emmet_settings = {
\  'php' : {
\    'extends' : 'html',
\    'filters' : 'c',
\  },
\  'xml' : {
\    'extends' : 'html',
\  },
\  'haml' : {
\    'extends' : 'html',
\  },
\}

let g:user_emmet_expandabbr_key = '<c-e>' "设置为ctrl+e展开

" -----------Tagbar -------------
nmap tb :TagbarToggle<CR>
vmap tb :TagbarToggle<CR>


"-------------Projects---------------
nmap <silent> pr <Plug>ToggleProject

"-----------commentary-----------------
nmap cc gcc
vmap cc gcc
autocmd FileType php set commentstring=//\ %s

"--------------javascript-libraries-syntax.vim--------------
let g:used_javascript_libs = 'jquery,underscore,angularjs,angularui,requirejs'

"--------------csscomb-for-vim--------------
nmap <Leader>c :CSScomb<cr>
vmap <Leader>c :CSScomb<cr>

" -----------JsBeautify -------------
map <c-f> :call JsBeautify()<cr>
" or
autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
" for html
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
" for css or scss
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>

"-------------easymotion---------------
let g:EasyMotion_leader_key='<Space>'



"-------------UltiSnips---------------
nmap <Leader>u :UltiSnipsEdit<cr>
vmap <Leader>u :UltiSnipsEdit<cr>
let g:UltiSnipsExpandTrigger="<Space><tab>"

" ----------- neocomplete-------------
inoremap <leader><TAB> <C-c>

"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplete#enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplete#enable_insert_char_pre = 1

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'